[ 02/03/2023 07:15PM Day 01 ]

~ Reddit Clone w/ React, Next.js, Firebase v9, Chakra UI

-- Chakra UI
  + ChakraUI Provider
  + ChakraUI Theme
  + ChakraUI Fonts
  + ChakraUI Icons


-- 1. Begin Project
  >> npx create-next-app@latest

  + _app.tsx --> represents entire application
  + Whatever page or component we will create will be a child of this app

  + index.tsx --> represent everything rendered on the screen
  + Represent our index route

-- 2. Core package installations (Chakra-React, Firebase, Recoil)
  - Charka UI installation
    >> npm i @chakra-ui/react @emotion/react @emotion/styled framer-motion

  + npm i firebase recoil

  - Setup Chakra
    + Import ChakraProvider in _app.tsx
    + And, wrap your component with it

  + ChakraProvider makes sure you have chakra components available throughout your application

  - Use a /src folder
    + Create a /src folder
    + Put /pages and /styles folder inside it 
    + Restart the server

  + We can completely delete the styles folder because chakra will be handling it for us

[ 03/03/2023 12:00PM Day 02 ]

--> Video starts @14:12

-- 3. Create Chakra Theme
  + We will be needing no style provided by css

  + All of our styles will be handled by chakra

  + In chakra ui, we can create our customized theme using JS objects

  + Theme contains color that will be present throughout our application such as brand color, accent, shades, etc
  + It aims to make your application consistent from styling prespective

  - How to initialize chakra theme?
   + We will keep chakra theme config in a separate chakra directory
   + Create a new directory in the /src called chakra
   + Inside it create a file theme.ts
   + Import "extend theme" function from chakra and setup the theme
   + Export the theme object
   + Import the theme object in the _app
   + Pass it as a prop to chakra provider so it will be available for us throughout the application

  + Chakra UI also provide us with fonts
  + Chakra UI fonts

  + We can also setup fonts in chakra ui theme

  + We can set global styling by passing a callback which applies it immediately

  + We can also style chakra ui components in the theme, it's variants etc

-- 4. React TypeScript Intro & NextJS Layout Component
  + Now will be working on the layout of the page

  + We will create a nextjs layout
  + This represents the layout of the page

  + Important: We put components in layout that we want to show on every page

  + We wrap the main component inside _app file with the layout component

  + Install React TypeScript Snippets extension in vs code

  - How do we setup layouts in next js?
    + Create a components folder in the /src directory 
    + Create a Layout folder
    + Because, we will be having more than one layout in our application
    + Create a Layout.ts file

  - TypeScript for react
    + We specify types for each component
    + We specify what props we will be passing into it
    + So, when we will be using it we can prevent the errors
    + JS lacks this feature

  + React.FC --> Returning a type of a react functional component

  + We wont be needing props inside our layout component, so we can remove LayoutProp type

--> Pause @01:05PM
--> Resume @02:54

-- 5. Begin Navbar
  + In react, its common to name route files of a folder to be index.tsx

  + We will create a new folder for Navbar
  + Because Navbar will itself contain bunch of component

  + We will use Navbar component in the layout file

  + <Flex></Flex> --> Applies CSS flexbox

  + We can pass CSS rules as props into the Chakra UI components

-- 6. Navbar Logos & Chakra UI Styling Fundamentals
  + Image --> To use images

  + Note: When using images from public directory
  + We dont need to specify the entire relative path from current directory
  + We can just use /images/imageName.svg

  - Media Queries
    + We write media queries for single elements
    + Base --> Mobile Screen Size --> Chakra is mobile first library
    + Md --> Medium Screen size

    + none / unset

  - How to apply media queries?
    + propertyName={{base: "value for mobile", md: "value for medium screens"}}

  - We will be making following components for the Navbar
    + <Directory />
    + <SearchInput />
    + <RightContent /> --> Different views based on user logged in or not

-- 7. SearchInput Component
  + We will take user as a prop later

  + We will use <InputGroup /> Component here
  + <InputLeftElement> / <InputRightElement>
  + <Input>
  + Because, in the search bar, there's a search logo and text field

  + <PhoneIcon> --> Coming from Chakra UI Icon Library

  --> Stop @03:05PM
  --> Start @08:30PM

  - How do we access pseudo classes in chakra ui?
    + By using a underscore in the beginning
    + _hover={{ color: 'red', border: '1px solid' }}
    + _focus
    + _placeHolder, etc...

-- 8. Authentication buttons & Chakra UI global component styling
  + Now, we will create a RightContent Component
  + It will have further more components inside it
  + AuthModal --> SignIn Popup
  + AuthButtons --> Login / SignUp

  - Why do we need a RightContent Component?
    + Because, the content situated on the right of the navbar is dynamic
    + It will be different for signed in users and non-signed in users
    + Therefore, it will be best if we create it's own component and separate it's conditional logic there

  + Since buttons gonna appear multiple times in our application, so we need consistent styling for them.
  + Therefore, we will create globla styling for our buttons so we dont have to write the same styles again and again

  + We define global styling of each component in separate file
  + ComponentStyleConfig --> Type for component styling
  + With this type, the object will show what are the available values
  + This is the beauty of typescript

  - We do global styling of components based on following
    + baseStyle --> Just base style that every variant will follow
    + sizes --> On different screens
    + variants --> Solid, Outline, Disabled --> We name them

  + Note: Height, Width, Size of each button will depend on the usage
  + We will define it wherever we're gonna use them
  + We dont need to define them in global styling
   
[ 04/03/2023 07:10PM Day 03 ]

--> Video starts @44:59

-- 9. Authentication Modal Intro
  + We will create a folder for "Modal" in the src directory
  + Because we're gonna have more than one modal
  + Login/SignUp Modal
  + Create Community Modal

  + We will create another Auth folder inside Modal
  + Because, Auth modal itself will have multiple components

  + Copy the Modal code from Chakra UI website
  + We dont need to use useDisclosure hook
  + We will create custom implementation of opening and closing the modal

  + Both of the login and signup button will trigger opening of the modal

-- 10. Recoil Setup & Intro
  - Why do we need to implement global state?
    + Because, the modal open will be triggered from different components

    - For example, 
      + It will be opened when you wanna vote on a post and you're not logged in
      + It will be opened when you wanna join a community and you're not logged in
      + It will be opened when you wanna signin or login from navbar

    + Therefore, we need to lift the modal state from AuthModal component

  + Recoil is much simpler than redux

  - How to setup recoil?
    1. We need to wrap our app component with <RecoilRoot> component
      + It will make the global state available in the entire application

    2. Need to create an atom
      + Atom is same as slice in redux
      + Atoms contain the source of truth for our application state
      + Atom is used to initialize the state

    3. Create atoms folder in the /src directory
      + It's where all of our pieces of global state live

    4. Create a file --> 'authModalAtom.ts'

    5. Create an atom for the authModalState
      i. Import "atom" from "recoil"
      ii. Create a type of state's data using interface --> it will contain properties the auth modal atom will have
      iii. Create a default state object
      iv. Initialize the atom by passing an object to it
        + The object will contain two properties
        + key --> Used to identify the state uniquely
        + default --> Similar to useState hook --> Pass a default value for the state

  - How to use global state powered by recoil in a component?
   >> const [state, setState] = useRecoilState(stateAtom);

  + useRecoilState --> Get & Set
  + useSetRecoilState --> Only Set

--> Pause @08:20PM --> 1 hour 10 minutes
--> Resume @08:57PM

-- 11. Authentication Modal Content
  + Make the modal title dynamic using authModelState 'view'

  - What other components do we need in our AuthModal?
    + OAuthButtons
    + AuthInputs
    + ResetPassword

  + First, we will implement the AuthInputs Component
  + The AuthInputs has two further more components in it 
  + Login and SignUp Components
  + We will show these components conditionally 
  + If authModalState is login --> <Login>
  + If authModalState is signup --> <SignUp>

  - How we can use single state for multiple inputs?
    + Using dynamic property

    >> {
      ...prev,
      [event.target.name]: event.target.name
    }

--> Stop @10:10PM --> 1 hour 13 minutes --> Video starts @1:18:57

[ 05/03/2023 10:42PM Day 04 ]

--> Video starts @1:18:57

-- 12. OAuth Buttons (Sign In w/ Google, Facebook, Github, etc.)

--> Pause @11:16PM --> 34 minutes
--> Resume @12:50PM

-- 13. Firebase Setup
  - Steps to setup firebase
    1. Create a new project
    2. Register app (web app, ios, android, flutter, etc)
    3. Add firebase SDK to your application (config)

  + Note: NEXT JS performs SSR as well as CSR
  + If we initialize our the default way, it will initialize it on the server, and as well as on the client
  + To prevent this issue, we will two functions from firebase
  + getApps() and getApp()
  + We will check getApps.length if it's zero, we will initialize it 
  + Otherwise, we will get the already initialized app

-- 14. User Creation
  + We will be using react-firebase-hooks npm package to interact with firebase app

  + For creating a new user
  + We will be using useCreateUserWithEmailAndPassowrd hook
  + It will return createUserWithEmailAndPassword function, the user itself, loading, and error states

  + We set errors in frontend by using useState hook

  + Important
  + ChakraUI Buttons consist an attribute called loading
  + If the state of the button is loading, then it will loading animation

-- 15. Firebase Error Handling (TypeScript indexing, custom error messages)
  - What if we try to signup a user that already exists
    + Firebase will respond with a error
    + We will handle it by using userError variable provided by the react-firebase-hooks library

  + We will map firebase errors using an object

  + When we pass userError.message as key to FIREBASE_ERRORS object
  + We will get a typescript indexing error
  + We can solve by using type casting like follows
  >> FIREBASE_ERRORS[userError.message as keyof typeof FIREBASE_ERRORS]

-- 16. Google Authentication (useSignInWithGoogle hook)
  + Enable "Google Provider" from google

  + SignUp using a provider is same as logging in using the service provider
  + Same logic is used in both areas

-- 17. Sign In Existing Users

[ 07/03/2023 04:10AM Day 05 ]

--> Video starts @1:56:54

-- 18. useAuthState firebase hook
  + We have to do something useful once the user has logged in 
  + We also need to tell the user that it has logged in

  + Now, we need to obtain logged in user and do somethin useful with it
  + We implement this logic using the useAuthState hook

  + Once we logged in, we need to close the modal
  + We will implement this logic in AuthModal component
  + The useAuthState hook returns three values --> user, loading, error
  + We will use useEffect hook, and put the user in its dependency array
  + If the state of the user changes, useEffect will run, closing the modal

  + There are two ways to use user
  + Call useAuthState in each component
  + OR, call it once in Navbar component, and pass it as prop to other components

  - How to implement sign out logic?
    + import signOut function from firebase/auth
    + Run it by passing the auth object --> signOut(auth)

  + useAuthState hook persist the user if the page refreshes or user comes back after few days

-- 19. Reset Passwords (useSendPasswordResetEmail)
  >> npm i react-icons

  + We can await the network requests 
  + If there is some code that's supposed to run just right after the network request
  + We can await so the next line of code waits for the network request to complete

--> Pause @05:25AM --> 1 hour and 15 minutes
--> Resume @02:10PM

-- 20. Navbar Icons (react-icons)
  + We are passing react icons as children to chakra ui Icon Component
  + To style them easily

  + We are wrapping each icon inside in another flex element
  + Because of the hover effect

--> Pause @02:30PM --> 20 minutes
--> Resume @07:25PM

-- 21. User Dropdown Menu

--> Pause @09:00PM --> 1 hour and 35 minutes
--> Resume @11:28PM 

-- 22. User Karma (custom user properties)

--> stop @11:39PM --> 11 Minutes





  















