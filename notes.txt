[ 02/03/2023 07:15PM Day 01 ]

~ Reddit Clone w/ React, Next.js, Firebase v9, Chakra UI

-- Chakra UI
  + Chakra Provider
  + Chakra Theme
  + Chakra Fonts

-- 1. Begin Project
  >> npx create-next-app@latest

  + _app.tsx --> represents entire application
  + Whatever page or component we will create will be a child of this app

  + index.tsx --> represent everything rendered on the screen
  + Represent our index route

-- 2. Core package installations (Chakra-React, Firebase, Recoil)
  - Charka UI installation
    >> npm i @chakra-ui/react @emotion/react @emotion/styled framer-motion

  + npm i firebase recoil

  - Setup Chakra
    + Import ChakraProvider in _app.tsx
    + And, wrap your component with it

  + ChakraProvider makes sure you have chakra components available throughout your application

  - Use a /src folder
    + Create a /src folder
    + Put /pages and /styles folder inside it 
    + Restart the server

  + We can completely delete the styles folder because chakra will be handling it for us

[ 03/03/2023 12:00PM Day 02 ]

--> Video Start @14:12

-- 3. Create Chakra Theme
  + We will be needing no style provided by css

  + All of our styles will be handled by chakra

  + In chakra ui, we can create our customized theme using JS objects

  + Theme contains color that will be present throughout our application such as brand color, accent, shades, etc
  + It aims to make your application consistent from styling prespective

  - How to initialize chakra theme?
   + We will keep chakra theme config in a separate chakra directory
   + Create a new directory in the /src called chakra
   + Inside it create a file theme.ts
   + Import "extend theme" function from chakra and setup the theme
   + Export the theme object
   + Import the theme object in the _app
   + Pass it as a prop to chakra provider so it will be available for us throughout the application

  + Chakra UI also provide us with fonts
  + Chakra UI fonts

  + We can also setup fonts in chakra ui theme

  + We can set global styling by passing a callback which applies it immediately

  + We can also style chakra ui components in the theme, it's variants etc

-- 4. React TypeScript Intro & NextJS Layout Component
  + Now will be working on the layout of the page

  + We will create a nextjs layout
  + This represents the layout of the page

  + Important: We put components in layout that we want to show on every page

  + We wrap the main component inside _app file with the layout component

  + Install React TypeScript Snippets extension in vs code

  - How do we setup layouts in next js?
    + Create a components folder in the /src directory 
    + Create a Layout folder
    + Because, we will be having more than one layout in our application
    + Create a Layout.ts file

  - TypeScript for react
    + We specify types for each component
    + We specify what props we will be passing into it
    + So, when we will be using it we can prevent the errors
    + JS lacks this feature

  + React.FC --> Returning a type of a react functional component

  + We wont be needing props inside our layout component, so we can remove LayoutProp type

--> Stop @01:05PM
--> Start @02:54

-- 5. Begin Navbar
  + In react, its common to name route files of a folder to be index.tsx

  + We will create a new folder for Navbar
  + Because Navbar will itself contain bunch of component

  + We will use Navbar component in the layout file

  + <Flex></Flex> --> Applies CSS flexbox

  + We can pass CSS rules as props into the Chakra UI components

-- 6. Navbar Logos & Chakra UI Styling Fundamentals
  + Image --> To use images

  + Note: When using images from public directory
  + We dont need to specify the entire relative path from current directory
  + We can just use /images/imageName.svg

  - Media Queries
    + We write media queries for single elements
    + Base --> Mobile Screen Size --> Chakra is mobile first library
    + Md --> Medium Screen size

    + none / unset

  - How to apply media queries?
    + propertyName={{base: "value for mobile", md: "value for medium screens"}}

  - We will be making following components for the Navbar
    + <Directory />
    + <SearchInput />
    + <RightContent /> --> Different views based on user logged in or not












  















